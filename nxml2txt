#!/usr/bin/env python

# Convert NLM .nxml to text and standoff annotations

import os
import sys
import codecs

from collections import namedtuple
from lxml import etree as ET

from src import rewritetex
from src import rewritemmla
from src import respace
from src import rewriteu2a
from src import standoff
from os import walk

usage='%s NXMLFILE [TEXTFILE] [SOFILE]' % __file__

TexOptions = namedtuple('TexOptions', 'verbose')
U2aOptions = namedtuple('U2aOptions', 'hex keep_missing stdout directory overwrite')

def nxml2txt(nxmlfn, tex_options=None, u2a_options=None):
    tree = ET.parse(nxmlfn)

    # process embedded TeX math
    if tex_options is None:
        tex_options = TexOptions(verbose=True)
    rewritetex.process_tree(tree, options=tex_options)

    # process MathML annotations
    rewritemmla.process_tree(tree)

    # normalize whitespace
    respace.process_tree(tree)

    # map unicode to ASCII
    if u2a_options is None:
        u2a_options = U2aOptions(keep_missing=True, hex=False, stdout=False,
                                 directory=None, overwrite=False)
    rewriteu2a.process_tree(tree, options=u2a_options)

    # convert to text and standoffs
    text, standoffs = standoff.convert_tree(tree)

    return text, standoffs

def write_text(text, nxmlfn, argv=None):
    if argv is not None :
        textfn = argv
    else:
        textfn = nxmlfn.replace('.nxml', '') + '.txt'
    standoff.write_text(text, textfn)

def write_standoffs(standoffs, nxmlfn, argv=None):
    if argv is not None:
        sofn = argv
    else:
        sofn = nxmlfn.replace('.nxml', '') + '.so'
    standoff.write_standoffs(standoffs, sofn)

#def main(argv):
    # if len(argv) < 2 or len(argv) > 4:
    #     print >> sys.stderr, 'Usage: %s' % usage
    #     return 1
    # nxmlfn = argv[1]
    #
    # text, standoffs = nxml2txt(nxmlfn)
    #
    # write_text(text, nxmlfn, argv)
    # write_standoffs(standoffs, nxmlfn, argv)
    #
def main():
    f = []
    readpath = '/Users/fereshteh/Documents/eclipse-workspace/IR_Project/src/Data/pmc-text-00'
    # for (dirpath, dirnames, filenames) in walk(mypath):  # type: (object, object, object)
    #     f.extend(filenames)
    #     print dirpath
    #     print dirnames
    #     print filenames
    #     break
    import os
    import fnmatch

    for dirpath, dirs, files in os.walk(readpath):
        print dirpath
        for filename in fnmatch.filter(files, '*.nxml'):
            nxmlfn = dirpath +'/' + filename
            text, standoffs = nxml2txt(nxmlfn)
            write_text(text, nxmlfn)
    return 0
    
if __name__ == '__main__':
    # sys.exit(main(sys.argv))
    main()
